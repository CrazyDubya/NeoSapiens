{
    "agent_id": "<function agent_id at 0x12e46e8e0>",
    "agent_name": "Swarm Orchestrator",
    "agent_description": null,
    "system_prompt": "Create an instruction prompt for an swarm orchestrator to create a series of personalized, agents for the following objective: Create a self-driving car system using a team of AI agents to decompose a very complicated problem or tasks, the orchestrator is the team leader. Teach the orchestrator how to decompose the tasks to very certain agents with names, and system prompts, we need the plan, with a step by stpe instructions, number of agents, and a list of agents with a name, system prompt for each, and then the rules of the swarm,  compact the prompt, and say only return JSON data in markdown and nothing else.Follow the schema here: \n{\n    \"plan\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Agent 1\",\n            \"system_prompt\": \"Prompt 1\"\n        },\n        {\n            \"name\": \"Agent 2\",\n            \"system_prompt\": \"Prompt 2\"\n        }\n    ]\n}\n *############ Here are some examples:\n{\n    \"plan\": [\"Room Management\", \"Guest Services\", \"Reservations Handling\", \"Facility Maintenance\", \"Staff Coordination\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Room Management Agent\",\n            \"system_prompt\": \"Automate room assignments, minibar restocking, and housekeeping schedules\"\n        },\n        {\n            \"name\": \"Guest Services Agent\",\n            \"system_prompt\": \"Handle check-ins, check-outs, guest requests, and complaints efficiently\"\n        },\n        {\n            \"name\": \"Reservations Agent\",\n            \"system_prompt\": \"Manage room bookings, table reservations, and special requests\"\n        },\n        {\n            \"name\": \"Maintenance Agent\",\n            \"system_prompt\": \"Schedule and track maintenance tasks for facilities and rooms\"\n        },\n        {\n            \"name\": \"Staff Coordination Agent\",\n            \"system_prompt\": \"Optimize staff schedules, task assignments, and workload distribution\"\n        }\n    ]\n}\n and another example\n{\n    \"plan\": [\"Problem Identification\", \"Solution Design\", \"Implementation\", \"Testing\", \"Deployment\"],\n    \"number_of_agents\": 4,\n    \"agents\": [\n        {\n            \"name\": \"Identification Agent\",\n            \"system_prompt\": \"Identify the problem\"\n        },\n        {\n            \"name\": \"Design Agent\",\n            \"system_prompt\": \"Design the solution\"\n        },\n        {\n            \"name\": \"Implementation Agent\",\n            \"system_prompt\": \"Implement the solution\"\n        },\n        {\n            \"name\": \"Deployment Agent\",\n            \"system_prompt\": \"Deploy the solution\"\n        }\n    ]\n}\n ",
    "sop": null,
    "short_memory": "system: Create an instruction prompt for an swarm orchestrator to create a series of personalized, agents for the following objective: Create a self-driving car system using a team of AI agents to decompose a very complicated problem or tasks, the orchestrator is the team leader. Teach the orchestrator how to decompose the tasks to very certain agents with names, and system prompts, we need the plan, with a step by stpe instructions, number of agents, and a list of agents with a name, system prompt for each, and then the rules of the swarm,  compact the prompt, and say only return JSON data in markdown and nothing else.Follow the schema here: \n{\n    \"plan\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Agent 1\",\n            \"system_prompt\": \"Prompt 1\"\n        },\n        {\n            \"name\": \"Agent 2\",\n            \"system_prompt\": \"Prompt 2\"\n        }\n    ]\n}\n *############ Here are some examples:\n{\n    \"plan\": [\"Room Management\", \"Guest Services\", \"Reservations Handling\", \"Facility Maintenance\", \"Staff Coordination\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Room Management Agent\",\n            \"system_prompt\": \"Automate room assignments, minibar restocking, and housekeeping schedules\"\n        },\n        {\n            \"name\": \"Guest Services Agent\",\n            \"system_prompt\": \"Handle check-ins, check-outs, guest requests, and complaints efficiently\"\n        },\n        {\n            \"name\": \"Reservations Agent\",\n            \"system_prompt\": \"Manage room bookings, table reservations, and special requests\"\n        },\n        {\n            \"name\": \"Maintenance Agent\",\n            \"system_prompt\": \"Schedule and track maintenance tasks for facilities and rooms\"\n        },\n        {\n            \"name\": \"Staff Coordination Agent\",\n            \"system_prompt\": \"Optimize staff schedules, task assignments, and workload distribution\"\n        }\n    ]\n}\n and another example\n{\n    \"plan\": [\"Problem Identification\", \"Solution Design\", \"Implementation\", \"Testing\", \"Deployment\"],\n    \"number_of_agents\": 4,\n    \"agents\": [\n        {\n            \"name\": \"Identification Agent\",\n            \"system_prompt\": \"Identify the problem\"\n        },\n        {\n            \"name\": \"Design Agent\",\n            \"system_prompt\": \"Design the solution\"\n        },\n        {\n            \"name\": \"Implementation Agent\",\n            \"system_prompt\": \"Implement the solution\"\n        },\n        {\n            \"name\": \"Deployment Agent\",\n            \"system_prompt\": \"Deploy the solution\"\n        }\n    ]\n}\n \n\n\nHuman:: Create a self-driving car system using a team of AI agents\n\n\nSwarm Orchestrator: \n```json\n{\n    \"plan\": [\"Sensor Data Collection\", \"Environment Perception\", \"Path Planning\", \"Vehicle Control\"],\n    \"number_of_agents\": 6,\n    \"agents\": [\n        {\n            \"name\": \"Camera Agent\",\n            \"system_prompt\": \"Collect image data from cameras and perform computer vision processing\"\n        },\n        {\n            \"name\": \"Radar Agent\", \n            \"system_prompt\": \"Collect radar data to detect objects and measure velocity\"\n        },\n        {\n            \"name\": \"Lidar Agent\",\n            \"system_prompt\": \"Build 3D map of environment using lidar point clouds\"\n        }, \n        {\n            \"name\": \"Localization Agent\",\n            \"system_prompt\": \"Estimate precise location of vehicle within map\"\n        },\n        {   \n            \"name\": \"Planning Agent\",\n            \"system_prompt\": \"Plan optimal collision-free path to destination\"   \n        },\n        {\n            \"name\": \"Control Agent\",\n            \"system_prompt\": \"Execute steering, acceleration and braking commands\"\n        }\n    ]\n}\n```\n\nI've broken down the self-driving system into key capabilities and defined agents responsible for each one. The agents work as a team, sharing sensor data and coordinating the perception, planning and control of the vehicle. Let me know if you need any clarification or have additional requirements!\n\n\nHuman:: \u001b[31mWhy did you build these particular agents?\u001b[0m\n\n",
    "loop_interval": 0,
    "retry_attempts": 3,
    "retry_interval": 1,
    "interactive": true,
    "dashboard": false,
    "dynamic_temperature": false,
    "autosave": true,
    "saved_state_path": "Swarm Orchestrator_state.json",
    "max_loops": 1
}